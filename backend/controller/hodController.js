const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const Hod = require("../models/hodModel");
const nodemailer = require("../config/nodemailer.config");

const loginHod = async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await Hod.findOne({ email });

    if (!user) {
      res.json({ message: "User not found" });
    } else if (user.status == "Pending") {
      res.json({ message: "Pending Status" });
    } else if (
      user &&
      (await bcrypt.compare(password, user.password)) &&
      user.status == "Active"
    ) {
      const token = await user.generateAuthToken();

      res.cookie("jwtokenhod", token, {
        expires: new Date(Date.now() + 86400000),
        httpOnly: true,
      });

      res.status(200).json({
        _id: user.id,
        name: user.name,
        email: user.email,
        token: token,
        message: "Successfully logged in",
      });
    } else {
      res.json({ message: "Invalid Password" });
    }
  } catch (error) {
    console.log(error);
  }
};

//==========================================================

const registerHod = async (req, res) => {
  try {
    const { name, email, password, department } = req.body;

    const userExists = await Hod.findOne({ email });

    if (userExists) {
      res.json({ message: "User Already Exists" });
    }

    // Hash Password

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    //Create User

    const user = await Hod.create({
      name,
      email,
      department,
      password: hashedPassword,
      status: "Pending",
    });

    if (user) {
      const token = await user.generateAuthToken();
      console.log(`Generated by signup ${token}`);

      await user.save((err) => {
        if (err) {
          res.status(500).send({ message: err });
          return;
        }

        console.log("E-mail information of user: ");

        console.log(user.name);
        console.log(user.email);
        console.log(user.token);

        nodemailer.sendConfirmationEmail(user.name, user.email, user.tokens);
        res.status(201).json({
          _id: user.id,
          name: user.name,
          email: user.email,
          token: token,
          message: "Successfully signed up",
        });
      });
    } else {
      res.status(400);
    }
  } catch (error) {
    console.log(error);
  }
};

const getAllPending = async (req, res) => {
  try {
    const { status } = req.body;

    const hod = await Hod.find({ status });
    if (!hod) {
      res.json({ message: "No pending Pc" });
    } else {
      res.json({ message: "Pc Details", hod: hod });
    }
  } catch (error) {
    console.log(error);
  }
};

const makeActive = async (req, res) => {
  try {
    const { email } = req.body;

    Hod.findOne({ email }, (err, hod) => {
      if (err) return res.status(500).send(err);

      if (hod.status === "Pending") {
        hod.status = "Active";
      }

      hod.save((err, hod) => {
        if (err) return res.status(500).send(err);
        nodemailer.sendActivationEmail(hod.name, hod.email, hod.tokens);
        res.send(hod);
      });
    });
  } catch (error) {
    console.log(error);
  }
};

const logoutHod = async (req, res) => {
  try {
    res.clearCookie("jwtokenhod", { path: "/" });
    res.status(200).send("user logout");
  } catch (error) {
    console.log(error);
  }
};

const getHodInfo = async (req, res) => {
  try {
    /*     console.log(req.user); */
    const { _id, name, department, email } = await Hod.findById(req.user._id);
    res.status(200).json({
      _id: _id,
      name: name,
      department: department,
    });
  } catch (error) {
    console.log(error);
  }
};

const deleteHod = async (req, res) => {
  try {
    const { email } = req.body;

    const hod = await Hod.findOne({ email });

    if (!hod) {
      res.status(400);
      console.log("Hod not found to be deleted");
    }
    nodemailer.sendDeclineEmail(hod.name, hod.email, hod.token);
    await hod.remove();

    return res.status(404).json({ message: "Hod deleted" });
  } catch (error) {
    console.log(error);
  }
};

/* const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "1d" });
}; */

module.exports = {
  loginHod,
  registerHod,
  getAllPending,
  makeActive,
  logoutHod,
  getHodInfo,
  deleteHod,
};
