const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const Pc = require("../models/pcModel");
const nodemailer = require("../config/nodemailer.config");
const Department = require("../models/departmentModel");
const Supplier = require("../models/supplierModel");

const loginPc = async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await Pc.findOne({ email });

    if (!user) {
      res.json({ message: "User not found" });
    } else if (user.status == "Pending") {
      res.json({ message: "Pending Status" });
    } else if (
      user &&
      (await bcrypt.compare(password, user.password)) &&
      user.status == "Active"
    ) {
      const token = await user.generateAuthToken();

      res.cookie("jwtokenpc", token, {
        expires: new Date(Date.now() + 86400000),
        httpOnly: true,
      });

      res.status(200).json({
        _id: user.id,
        name: user.name,
        email: user.email,
        token: token,
        message: "Successfully logged in",
      });
    } else {
      res.json({ message: "Invalid Password" });
    }
  } catch (error) {
    console.log(error);
  }
};

//==========================================================

const registerPc = async (req, res) => {
  try {
    const { name, email, password, department } = req.body;

    const userExists = await Pc.findOne({ email });

    if (userExists) {
      res.json({ message: "User Already Exists" });
    }

    // Hash Password

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    //Create User

    const user = await Pc.create({
      name,
      email,
      department,
      password: hashedPassword,
      status: "Pending",
    });

    if (user) {
      const token = await user.generateAuthToken();
      console.log(`Generated by signup ${token}`);

      await user.save((err) => {
        if (err) {
          res.status(500).send({ message: err });
          return;
        }

        console.log("E-mail information of user: ");

        console.log(user.name);
        console.log(user.email);
        console.log(user.token);

        nodemailer.sendConfirmationEmail(user.name, user.email, user.tokens);
        res.status(201).json({
          _id: user.id,
          name: user.name,
          email: user.email,
          token: token,
          message: "Successfully signed up",
        });
      });
    } else {
      res.status(400);
    }
  } catch (error) {
    console.log(error);
  }
};

const getAllPending = async (req, res) => {
  try {
    const { status } = req.body;

    const pcs = await Pc.find({ status });
    if (!pcs) {
      res.json({ message: "No pending Pc" });
    } else {
      res.json({ message: "Pc Details", pcs: pcs });
    }
  } catch (error) {
    console.log(error);
  }
};

const makeActive = async (req, res) => {
  try {
    const { email } = req.body;

    Pc.findOne({ email }, (err, pc) => {
      if (err) return res.status(500).send(err);

      if (pc.status === "Pending") {
        pc.status = "Active";
      }

      pc.save((err, pcs) => {
        if (err) return res.status(500).send(err);
        nodemailer.sendActivationEmail(pcs.name, pcs.email, pcs.tokens);
        res.send(pcs);
      });
    });
  } catch (error) {
    console.log(error);
  }
};

const logoutPc = async (req, res) => {
  try {
    res.clearCookie("jwtokenpc", { path: "/" });
    res.status(200).send("user logout");
  } catch (error) {
    console.log(error);
  }
};

const getPcInfo = async (req, res) => {
  try {
    const { _id, name, department, email } = await Pc.findById(req.user._id);
    res.status(200).json({
      _id: _id,
      name: name,
      department: department,
    });
  } catch (error) {
    console.log(error);
  }
};

const deletePc = async (req, res) => {
  try {
    const { email } = req.body;

    const pc = await Pc.findOne({ email });

    if (!pc) {
      res.status(400);
      console.log("Pc not found to be deleted");
    }
    nodemailer.sendDeclineEmail(pc.name, pc.email, pc.token);
    await pc.remove();

    return res.status(404).json({ message: "Pc deleted" });
  } catch (error) {
    console.log(error);
  }
};

const getdept = async (req, res) => {
  try {
    const depts = await Department.find();
    res.json({
      depts: depts,
    });
  } catch (error) {
    console.log(error);
  }
};

const addSupplier = async (req, res) => {
  try {
    const { supplier, address, contact } = req.body;

    await Supplier.create({
      supplier,
      address,
      contact,
    });

    res.json({ message: `Supplier added + ${supplier}` });
  } catch (error) {
    console.log(error);
  }
};

const getSupplier = async (req, res) => {
  try {
    const supp = await Supplier.find();
    res.json({
      supp: supp,
    });
  } catch (error) {
    console.log(error);
  }
};
const delSupplier = async (req, res) => {
  try {
    const { supplier } = req.body;
    const supp = await Supplier.findOne({ supplier });
    console.log(supp);
    if (!supp) {
      return res.status(400).json({ message: "Supplier not found" });
    }
    await supp.remove();

    return res.status(404).json({ message: "supplier deleted" });
  } catch (error) {
    console.log(error);
  }
};

module.exports = {
  loginPc,
  registerPc,
  getAllPending,
  makeActive,
  logoutPc,
  getPcInfo,
  deletePc,
  getdept,
  addSupplier,
  getSupplier,
  delSupplier,
};
